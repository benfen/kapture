#!/bin/bash

# Created by argbash-init v2.8.0
# Rearrange the order of options below according to what you would like to see in the help message.
# ARG_OPTIONAL_SINGLE([stores],[s],[Number of stores to initialize the BigPetStore with.  Will correspond to the number of Kafka topcis that will be generated],[13])
# ARG_OPTIONAL_SINGLE([customers],[c],[Number of customers to simulate for BigPetStore],[5000])
# ARG_OPTIONAL_SINGLE([simulation],[d],[Time (in days) to run the BigPetStore simulation over],[1500]))
# ARG_OPTIONAL_SINGLE([kafka-java-options],[],[Heap options to initialize kafka with],[-Xmx512M -Xms512M]))
# ARG_OPTIONAL_SINGLE([kafka-cpu-limit],[],[Limit to the CPU usage of a single Kafka container.  Should be expressed as a floating point number],[.2]))
# ARG_OPTIONAL_SINGLE([kafka-cpu-request],[],[Initial request for CPU by a single Kafka container.  Should be expressed as a floating point number],[.1]))
# ARG_OPTIONAL_SINGLE([kafka-memory-limit],[],[Limit to the memory usage of a single Kafka container.  Should be expressed in terms of a number followed by an optional size modifier],[2G]))
# ARG_OPTIONAL_SINGLE([kafka-memory-request],[],[Initial request for memory by a single Kafka container.  Should be expressed in terms of a number followed by an optional size modifier],[1G]))
# ARG_OPTIONAL_BOOLEAN([delete],[],[Deletes all the kubernetes resources generated by a normal run],[off])
# ARG_OPTIONAL_BOOLEAN([deploy-prometheus],[p],[Deploy Prometheus as part of the cluster],[off])
# ARG_OPTIONAL_BOOLEAN([deploy-redis],[r],[Deploy Redis (and the connector) as part of the cluster],[off])
# ARG_POSITIONAL_SINGLE([namespace],[The namespace to deploy Kapture to],[])
# ARG_POSITIONAL_SINGLE([load-generators],[Number of load generators to create to place load on the cluster],[0])
# ARG_DEFAULTS_POS()
# ARG_HELP([This script configures a cluster to run Kapture.])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.8.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info


die()
{
	local _ret=$2
	test -n "$_ret" || _ret=1
	test "$_PRINT_HELP" = yes && print_help >&2
	echo "$1" >&2
	exit ${_ret}
}


begins_with_short_option()
{
	local first_option all_short_options='scdprh'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - POSITIONALS
_positionals=()
_arg_namespace=
_arg_load_generators="0"
# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_stores="13"
_arg_customers="5000"
_arg_simulation="1500"
_arg_kafka_java_options="-Xmx512M -Xms512M"
_arg_kafka_cpu_limit=".2"
_arg_kafka_cpu_request=".1"
_arg_kafka_memory_limit="2G"
_arg_kafka_memory_request="1G"
_arg_delete="off"
_arg_deploy_prometheus="off"
_arg_deploy_redis="off"


print_help()
{
	printf '%s\n' "This script configures a cluster to run Kapture."
	printf 'Usage: %s [-s|--stores <arg>] [-c|--customers <arg>] [-d|--simulation <arg>] [--kafka-java-options <arg>] [--kafka-cpu-limit <arg>] [--kafka-cpu-request <arg>] [--kafka-memory-limit <arg>] [--kafka-memory-request <arg>] [--(no-)delete] [-p|--(no-)deploy-prometheus] [-r|--(no-)deploy-redis] [-h|--help] <namespace> [<load-generators>]\n' "$0"
	printf '\t%s\n' "<namespace>: The namespace to deploy Kapture to"
	printf '\t%s\n' "<load-generators>: Number of load generators to create to place load on the cluster (default: '0')"
	printf '\t%s\n' "-s, --stores: Number of stores to initialize the BigPetStore with.  Will correspond to the number of Kafka topcis that will be generated (default: '13')"
	printf '\t%s\n' "-c, --customers: Number of customers to simulate for BigPetStore (default: '5000')"
	printf '\t%s\n' "-d, --simulation: Time (in days) to run the BigPetStore simulation over (default: '1500')"
	printf '\t%s\n' "--kafka-java-options: Heap options to initialize kafka with (default: '-Xmx512M -Xms512M')"
	printf '\t%s\n' "--kafka-cpu-limit: Limit to the CPU usage of a single Kafka container.  Should be expressed as a floating point number (default: '.2')"
	printf '\t%s\n' "--kafka-cpu-request: Initial request for CPU by a single Kafka container.  Should be expressed as a floating point number (default: '.1')"
	printf '\t%s\n' "--kafka-memory-limit: Limit to the memory usage of a single Kafka container.  Should be expressed in terms of a number followed by an optional size modifier (default: '2G')"
	printf '\t%s\n' "--kafka-memory-request: Initial request for memory by a single Kafka container.  Should be expressed in terms of a number followed by an optional size modifier (default: '1G')"
	printf '\t%s\n' "--delete, --no-delete: Deletes all the kubernetes resources generated by a normal run (off by default)"
	printf '\t%s\n' "-p, --deploy-prometheus, --no-deploy-prometheus: Deploy Prometheus as part of the cluster (off by default)"
	printf '\t%s\n' "-r, --deploy-redis, --no-deploy-redis: Deploy Redis (and the connector) as part of the cluster (off by default)"
	printf '\t%s\n' "-h, --help: Prints help"
}


parse_commandline()
{
	_positionals_count=0
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			-s|--stores)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_stores="$2"
				shift
				;;
			--stores=*)
				_arg_stores="${_key##--stores=}"
				;;
			-s*)
				_arg_stores="${_key##-s}"
				;;
			-c|--customers)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_customers="$2"
				shift
				;;
			--customers=*)
				_arg_customers="${_key##--customers=}"
				;;
			-c*)
				_arg_customers="${_key##-c}"
				;;
			-d|--simulation)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_simulation="$2"
				shift
				;;
			--simulation=*)
				_arg_simulation="${_key##--simulation=}"
				;;
			-d*)
				_arg_simulation="${_key##-d}"
				;;
			--kafka-java-options)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_kafka_java_options="$2"
				shift
				;;
			--kafka-java-options=*)
				_arg_kafka_java_options="${_key##--kafka-java-options=}"
				;;
			--kafka-cpu-limit)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_kafka_cpu_limit="$2"
				shift
				;;
			--kafka-cpu-limit=*)
				_arg_kafka_cpu_limit="${_key##--kafka-cpu-limit=}"
				;;
			--kafka-cpu-request)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_kafka_cpu_request="$2"
				shift
				;;
			--kafka-cpu-request=*)
				_arg_kafka_cpu_request="${_key##--kafka-cpu-request=}"
				;;
			--kafka-memory-limit)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_kafka_memory_limit="$2"
				shift
				;;
			--kafka-memory-limit=*)
				_arg_kafka_memory_limit="${_key##--kafka-memory-limit=}"
				;;
			--kafka-memory-request)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_kafka_memory_request="$2"
				shift
				;;
			--kafka-memory-request=*)
				_arg_kafka_memory_request="${_key##--kafka-memory-request=}"
				;;
			--no-delete|--delete)
				_arg_delete="on"
				test "${1:0:5}" = "--no-" && _arg_delete="off"
				;;
			-p|--no-deploy-prometheus|--deploy-prometheus)
				_arg_deploy_prometheus="on"
				test "${1:0:5}" = "--no-" && _arg_deploy_prometheus="off"
				;;
			-p*)
				_arg_deploy_prometheus="on"
				_next="${_key##-p}"
				if test -n "$_next" -a "$_next" != "$_key"
				then
					begins_with_short_option "$_next" && shift && set -- "-p" "-${_next}" "$@" || die "The short option '$_key' can't be decomposed to ${_key:0:2} and -${_key:2}, because ${_key:0:2} doesn't accept value and '-${_key:2:1}' doesn't correspond to a short option."
				fi
				;;
			-r|--no-deploy-redis|--deploy-redis)
				_arg_deploy_redis="on"
				test "${1:0:5}" = "--no-" && _arg_deploy_redis="off"
				;;
			-r*)
				_arg_deploy_redis="on"
				_next="${_key##-r}"
				if test -n "$_next" -a "$_next" != "$_key"
				then
					begins_with_short_option "$_next" && shift && set -- "-r" "-${_next}" "$@" || die "The short option '$_key' can't be decomposed to ${_key:0:2} and -${_key:2}, because ${_key:0:2} doesn't accept value and '-${_key:2:1}' doesn't correspond to a short option."
				fi
				;;
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			*)
				_last_positional="$1"
				_positionals+=("$_last_positional")
				_positionals_count=$((_positionals_count + 1))
				;;
		esac
		shift
	done
}


handle_passed_args_count()
{
	local _required_args_string="'namespace'"
	test "${_positionals_count}" -ge 1 || _PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require between 1 and 2 (namely: $_required_args_string), but got only ${_positionals_count}." 1
	test "${_positionals_count}" -le 2 || _PRINT_HELP=yes die "FATAL ERROR: There were spurious positional arguments --- we expect between 1 and 2 (namely: $_required_args_string), but got ${_positionals_count} (the last one was: '${_last_positional}')." 1
}


assign_positional_args()
{
	local _positional_name _shift_for=$1
	_positional_names="_arg_namespace _arg_load_generators "

	shift "$_shift_for"
	for _positional_name in ${_positional_names}
	do
		test $# -gt 0 || break
		eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an Argbash bug." 1
		shift
	done
}

parse_commandline "$@"
handle_passed_args_count
assign_positional_args 1 "${_positionals[@]}"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash


printf 'Value of --%s: %s\n' 'stores' "$_arg_stores"
printf 'Value of --%s: %s\n' 'cusomters' "$_arg_cusomters"
printf 'Value of --%s: %s\n' 'simulation' "$_arg_simulation"
printf 'Value of --%s: %s\n' 'kafka-java-options' "$_arg_kafka_java_options"
printf 'Value of --%s: %s\n' 'kafka-cpu-limit' "$_arg_kafka_cpu_limit"
printf 'Value of --%s: %s\n' 'kafka-cpu-request' "$_arg_kafka_cpu_request"
printf 'Value of --%s: %s\n' 'kafka-memory-limit' "$_arg_kafka_memory_limit"
printf 'Value of --%s: %s\n' 'kafka-memory-request' "$_arg_kafka_memory_request"
printf "'%s' is %s\\n" 'delete' "$_arg_delete"
printf "'%s' is %s\\n" 'deploy-prometheus' "$_arg_deploy_prometheus"
printf "'%s' is %s\\n" 'deploy-redis' "$_arg_deploy_redis"
printf "Value of '%s': %s\\n" 'namespace' "$_arg_namespace"
printf "Value of '%s': %s\\n" 'load-generators' "$_arg_load_generators"


export namespace=$_arg_namespace
export load_generators=$_arg_load_generators
export customers=$_arg_customers
export simulation_time=$_arg_simulation
export stores=$_arg_stores
export deploy_prometheus=$_arg_deploy_prometheus
export deploy_redis=$_arg_deploy_redis
export delete=$_arg_delete

export kafka_java_options=$_arg_kafka_java_options
export kafka_cpu_limit=$_arg_kafka_cpu_limit
export kafka_cpu_request=$_arg_kafka_cpu_request
export kafka_memory_limit=$_arg_kafka_memory_limit
export kafka_memory_request=$_arg_kafka_memory_request

./scripts/kapture.sh
# ] <-- needed because of Argbash
