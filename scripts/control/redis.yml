---
apiVersion: v1
kind: Pod
metadata:
  labels:
    name: redis
    redis-sentinel: "true"
    role: master
    kapture: "true"
  name: redis-master
spec:
  containers:
    - name: master
      image: k8s.gcr.io/redis:v1
      env:
        - name: MASTER
          value: "true"
      ports:
        - containerPort: 6379
      resources:
        limits:
          cpu: "0.1"
      volumeMounts:
        - mountPath: /redis-master-data
          name: data
    - name: sentinel
      image: k8s.gcr.io/redis:v1
      env:
        - name: SENTINEL
          value: "true"
        - name: REDIS_SENTINEL_SERVICE_HOST
          value: localhost
      ports:
        - containerPort: 26379
  volumes:
    - name: data
      emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  labels:
    name: sentinel
    role: service
  name: redis-sentinel
spec:
  ports:
    - port: 26379
      targetPort: 26379
  selector:
    redis-sentinel: "true"
---
apiVersion: v1
kind: ReplicationController
metadata:
  name: redis
spec:
  replicas: 3
  selector:
    name: redis
    role: slave
  template:
    metadata:
      labels:
        name: redis
        role: slave
        kapture: "true"
    spec:
      containers:
      - name: redis
        image: k8s.gcr.io/redis:v1
        ports:
        - containerPort: 6379
        volumeMounts:
        - mountPath: /redis-master-data
          name: data
        env:
          - name: MAX_MEMORY
            value: "50mb"
          - name: EVICTION_POLICY
            value: allkeys-lru
        command:
          - bash
          - -c
          - "printf \"maxmemory $MAX_MEMORY\nmaxmemory-policy $EVICTION_POLICY\" >> /redis-slave/redis.conf && /run.sh"
      volumes:
      - name: data
---
apiVersion: v1
kind: ReplicationController
metadata:
  name: redis-sentinel
spec:
  replicas: 3
  selector:
    redis-sentinel: "true"
    role: sentinel
  template:
    metadata:
      labels:
        name: redis-sentinel
        redis-sentinel: "true"
        role: sentinel
        kapture: "true"
    spec:
      containers:
      - name: sentinel
        image: k8s.gcr.io/redis:v1
        env:
          - name: SENTINEL
            value: "true"
        ports:
          - containerPort: 26379
---
apiVersion: v1
kind: Service
metadata:
  name: rkconn-svc
  labels:
    app: rkconn
spec:
  ports:
    - port: 7001
      targetPort: 7001
      name: metrics
  selector:
    app: rkconn
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: rkconn
spec:
  replicas: 1
  selector:
    matchLabels:
      app: rkconn
  template:
    metadata:
      labels:
        app: rkconn
    spec:
      containers:
      - name: redis-consumer
        imagePullPolicy: Always
        image: carbonrelay/kapture:dev-alt-load-gen
        env:
          - name: BROKERS
            value: "kafka-svc:9093"
          - name: GROUP_ID
            value: "redis-consumer"
          - name: SENTINEL_HOST
            value: "redis-sentinel"
        ports:
          - containerPort: 7001
        command:
          - bash
          - -c
          - "/opt/redis-connector.sh"
---
